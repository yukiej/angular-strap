{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","navbar/navbar.js","typeahead/typeahead.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","modal/modal.js","dropdown/dropdown.js","collapse/collapse.js","datepicker/datepicker.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","provider","defaults","activeClass","routeAttr","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","target","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","stopEventPropagation","unbindAutoCloseEvents","$body","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","animation","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","equals","$onMouseDown","clientTop","active","offsetTop","clientBottom","highWatermark","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","isUndefined","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","charAt","toUpperCase","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","$viewChangeListeners","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","regexp","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","DateParserFactory","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","substr","today","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","$navbar","liElements","li","liElement","pattern","path","RegExp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","modalElement","findFocusableElements","focusable","focusableElements","findNextFocusableElement","inReverse","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","backdropAnimation","bindBackdropEvents","which","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","toggleEvent","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","documentEl","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          if (tipElement) {\n            tipElement[0].focus();\n          }\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus' && tipElement) {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        controller.$viewChangeListeners.push(function () {\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          controller.$render();\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          select.$updateActiveIndex();\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\n          // Only do this if the backdrop option is set.\n          if (options.backdrop) {\n            bodyElement.attr('aria-hidden', 'true');\n          }\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n          modalElement[0].focus();\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            if (options.backdrop) {\n              bodyElement.attr('aria-hidden', 'false');\n            }\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var documentEl = angular.element($window.document);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((documentEl.height() - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          if (tipElement) {\n            tipElement[0].focus();\n          }\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus' && tipElement) {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        controller.$viewChangeListeners.push(function () {\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          controller.$render();\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          select.$updateActiveIndex();\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\n          // Only do this if the backdrop option is set.\n          if (options.backdrop) {\n            bodyElement.attr('aria-hidden', 'true');\n          }\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n          modalElement[0].focus();\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            if (options.backdrop) {\n              bodyElement.attr('aria-hidden', 'false');\n            }\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var documentEl = angular.element($window.document);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((documentEl.height() - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"]}